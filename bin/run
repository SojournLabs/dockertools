#!/bin/bash
# Run the Docker container with the command specified.
if [ $# -lt 2 ]; then
    echo "Usage: $0 container_dir container_name cmd1 cmd2 ... cmdN"
    echo "Environment variables supported:"
    echo "VAPR_DATA_DIR_x=y mount directory y as /vapr/y from host directory x."
	exit 1
fi

CONTAINER_DIR=$1
CONTAINER=$2
shift
shift


# Try to set default certstore if it exists.
if [ "${VAPR_CERTSTORE}" == "" ]; then
    if [ -d /home/core/certstore ]; then
        export VAPR_CERTSTORE=/home/core/certstore
    fi
fi

# Read-only certificate store?
VAPR_CERTSTORE_RO=${VAPR_CERTSTORE_RO:=FALSE}
if [ "${VAPR_CERTSTORE_RO}" == "TRUE" ]; then
    export VAPR_DATA_DIRRO_certstore=${VAPR_CERTSTORE}
else
    export VAPR_DATA_DIR_certstore=${VAPR_CERTSTORE}
fi

# Set up the mount points for Docker.
MOUNTS=$(set | egrep "^VAPR_DATA_DIR_" | sed 's/^VAPR_DATA_DIR_\(.*\)=.*/\1/')
DATA_DIRS=
for DIR_NAME in ${MOUNTS}; do
    eval MOUNT_POINT=\$VAPR_DATA_DIR_${DIR_NAME}
    DATA_DIRS+="-v ${MOUNT_POINT}:/vapr/${DIR_NAME} "
done

# Set up the read-only mount points for Docker.
MOUNTS=$(set | egrep "^VAPR_DATA_DIRRO_" | sed 's/^VAPR_DATA_DIRRO_\(.*\)=.*/\1/')
for DIR_NAME in ${MOUNTS}; do
    eval MOUNT_POINT=\$VAPR_DATA_DIRRO_${DIR_NAME}
    DATA_DIRS+="-v ${MOUNT_POINT}:/vapr/${DIR_NAME}:ro "
done


if [ "${DOCKER_BUILD}" == "TRUE" ]; then
    docker build -t sojournlabs/${CONTAINER} ${CONTAINER_DIR}
fi

REMOVE_FLAG=true

if [ "${DOCKER_DAEMONIZE}" == "TRUE" ]; then
    DAEMONIZE_FLAG=-d
    REMOVE_FLAG=false
    NAME_FLAG="--name ${CONTAINER}"
fi

if [ "${VAPR_CERTSTORE}" == "" ]; then
    tput bold; tput setaf 1
    printf "ERROR: "
    tput sgr0
    echo No certificate store location set.
    exit 1
fi

docker run ${DOCKER_FLAGS} ${DAEMONIZE_FLAG} ${NAME_FLAG} --rm=${REMOVE_FLAG} -t -i ${DATA_DIRS} sojournlabs/${CONTAINER} "$@"
